* Rinha Compilers

#+ATTR_HTML: :width 1000
[[./img/banner.png]]

* Building and Running

#+begin_src shell

  # Build the image
  docker build -t rinha-compilers .

  # Run
  docker run rinha-compilers
 
#+end_src

* AST example for Fibonacci program

#+begin_src cpp

  let fib = fn (n) => {
    if (n < 2) {
      n
    } else {
      fib(n - 1) + fib(n - 2)
    }
  };

  print(fib(46))
  
#+end_src

#+ATTR_HTML: :width 1000
[[./img/fib-ast.png]]


## Enhancements
- Remove escape chars in the print output
- define anonymous function, i.e, without let
- fix print \n
- what is var, different from let?
- add error for parameter and var with same names
- check if all Term occurrences in SPECS represents the same think in my grammar

    call->callee

- execute function from expressions
- let value next?
- define docker restrictions

# DOUBTS
- As operações binárias são possíveis para qualquer expressão que retorne valor, como if, print, etc?
