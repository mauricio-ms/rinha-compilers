* Rinha Compilers

#+ATTR_HTML: :width 1000
[[./img/banner.png]]

* Building and Running

#+begin_src shell

  # Build the image
  docker build -t rinha-compilers .

  # Run
  docker run rinha-compilers
 
#+end_src

* AST example for Fibonacci program

#+begin_src cpp

  let fib = fn (n) => {
    if (n < 2) {
      n
    } else {
      fib(n - 1) + fib(n - 2)
    }
  };

  print(fib(46))
  
#+end_src

#+ATTR_HTML: :width 1000
[[./img/fib-ast.png]]


## Enhancements
- Remove escape chars in the print output
- fix print \n
- rename RinhaToJava to RinhaInterpreter
- use labels in expressions with multiples derivations like term and try to remove the op and binop token labels
- use -no-listener option in scripts to not generate listeners
- analyze to use ParseTreeProperty<T>
- define reserved words
- regenerate fibAST
- testar tupla dentro de tupla
- testar passar função como argumento
- fn() => "" é válido?